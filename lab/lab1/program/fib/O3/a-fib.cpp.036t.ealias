
;; Function std::basic_ostream<char>::operator<< (_ZNSolsEPFRSoS_E, funcdef_no=2061, decl_uid=42317, cgraph_uid=795, symbol_order=828)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pf = &NONLOCAL
ESCAPED = this
_6 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__pf"[label="__pf = { 5 }"];
"_6";
"_ZNSolsEPFRSoS_E";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__pf";
"*_6";
"*_ZNSolsEPFRSoS_E";

  // Edges in the constraint graph:
"this" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_6";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_6";
"_ZNSolsEPFRSoS_E";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _6\l"];
"STOREDANYTHING";
"INTEGER";
"this";
"_6";
"_ZNSolsEPFRSoS_E";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
"_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pf = { NONLOCAL } same as this
_6 = { ESCAPED NONLOCAL }
_ZNSolsEPFRSoS_E = { }


Alias information for std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__pf_2(D), points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct __ostream_type & std::basic_ostream<char>::operator<< (struct basic_ostream * const this, struct __ostream_type & (*<T65bd>) (struct __ostream_type &) __pf)
{
  struct __ostream_type & _6;

  <bb 2> :
  _6 = __pf_2(D) (this_4(D));
  return _6;

}



;; Function std::basic_ios<char>::rdstate (_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv, funcdef_no=2184, decl_uid=41520, cgraph_uid=918, symbol_order=951)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 256

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"_3";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*_3";
"*_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_3 = *this + 256\l"];
"_3";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_3 = *this + 256\l"];
"_3";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv = { }


Alias information for std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

iostate std::basic_ios<char>::rdstate (const struct basic_ios * const this)
{
  iostate _3;

  <bb 2> :
  _3 = this_2(D)->D.41638._M_streambuf_state;
  return _3;

}



;; Function std::flush<char, std::char_traits<char> > (_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, funcdef_no=2141, decl_uid=42537, cgraph_uid=875, symbol_order=908)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
ESCAPED = __os
_4 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__os"[label="__os = { 5 }"];
"_ZNSo5flushEv";
"_4";
"_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__os";
"*_ZNSo5flushEv";
"*_4";
"*_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"__os" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__os";
"_ZNSo5flushEv";
"_4";
"_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__os" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__os";
"_ZNSo5flushEv";
"_4";
"_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__os" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
_ZNSo5flushEv = { }
_4 = { ESCAPED NONLOCAL }
_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }


Alias information for std::basic_ostream<_CharT, _Traits>& std::flush(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__os_2(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::flush<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & _4;

  <bb 2> :
  _4 = std::basic_ostream<char>::flush (__os_2(D));
  return _4;

}



;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=2301, decl_uid=49911, cgraph_uid=1035, symbol_order=1092)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__initialize_p = &NONLOCAL
__priority = &NONLOCAL
_ZStL8__ioinit = NONLOCAL
ESCAPED = &_ZStL8__ioinit
ESCAPED = &_ZNSt8ios_base4InitD1Ev
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 8 9 10 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"__initialize_p"[label="__initialize_p = { 5 }"];
"__priority"[label="__priority = { 5 }"];
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_ZStL8__ioinit";
"*_ZNSt8ios_base4InitD1Ev";
"*__dso_handle";
"*__initialize_p";
"*__priority";
"*_ZNSt8ios_base4InitC1Ev";
"*__cxa_atexit";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"__initialize_p";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"__initialize_p";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "_ZNSt8ios_base4InitD1Ev";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
"_ZStL8__ioinit" -> "ESCAPED";
"_ZNSt8ios_base4InitD1Ev" -> "ESCAPED";
"__dso_handle" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZStL8__ioinit = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitD1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }
__initialize_p = { NONLOCAL }
__priority = { NONLOCAL } same as __initialize_p
_ZNSt8ios_base4InitC1Ev = { }
__cxa_atexit = { }


Alias information for void __static_initialization_and_destruction_0(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.45097 D.49916 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


void __static_initialization_and_destruction_0 (int __initialize_p, int __priority)
{
  <bb 2> :
  if (__initialize_p_2(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (__priority_4(D) == 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  std::ios_base::Init::Init (&__ioinit);
  __cxxabiv1::__cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);

  <bb 5> :
  return;

}



;; Function std::__constant_string_p<char> (_ZSt19__constant_string_pIcEbPKT_, funcdef_no=477, decl_uid=13474, cgraph_uid=123, symbol_order=132)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__s"[label="__s = { 5 }"];
"_ZSt19__constant_string_pIcEbPKT_";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__s";
"*_ZSt19__constant_string_pIcEbPKT_";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"_ZSt19__constant_string_pIcEbPKT_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"_ZSt19__constant_string_pIcEbPKT_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { NONLOCAL }
_ZSt19__constant_string_pIcEbPKT_ = { }


Alias information for constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = char]

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__attribute__((always_inline))
bool std::__constant_string_p<char> (const char * __s)
{
  <bb 2> :
  return 0;

}



;; Function __gnu_cxx::char_traits<char>::eq (_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_, funcdef_no=479, decl_uid=13494, cgraph_uid=124, symbol_order=133)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c1
_2 = *__c2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__c1"[label="__c1 = { 5 }"];
"__c2"[label="__c2 = { 5 }"];
"_1";
"_2";
"_6";
"_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__c1";
"*__c2";
"*_1";
"*_2";
"*_6";
"*_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"*__c1" -> "_1";
"*__c2" -> "_2";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__c1" [label="\N\n_1 = *__c1\l_2 = *__c1\l"];
"_1";
"_2";
"_6";
"_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__c1" [label="\N\n_1 = *__c1\l_2 = *__c1\l"];
"_1";
"_2";
"_6";
"_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }
_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_ = { }


Alias information for static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char]

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__c1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__c2_5(D), points-to non-local, points-to NULL, points-to vars: { }

bool __gnu_cxx::char_traits<char>::eq (const char_type & __c1, const char_type & __c2)
{
  char _1;
  char _2;
  bool _6;

  <bb 2> :
  _1 = *__c1_4(D);
  _2 = *__c2_5(D);
  _6 = _1 == _2;
  return _6;

}



;; Function __gnu_cxx::char_traits<char>::length (_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc, funcdef_no=478, decl_uid=13504, cgraph_uid=125, symbol_order=134)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__i_13 = __i_3 + UNKNOWN
__i_13 = &NONLOCAL
__i_3 = &NULL
__i_3 = __i_13
_1 = __p + UNKNOWN
_9 = *_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__p"[label="__p = { 5 }"];
"__i_13"[label="__i_13 = { 5 }"];
"__i_3"[label="__i_3 = { 1 }"];
"_1";
"_9";
"_15";
"_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__p";
"*__i_13";
"*__i_3";
"*_1";
"*_9";
"*_15";
"*_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"__i_13" -> "__i_3";
"*_1" -> "_9";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__p" [label="\N\n_1 = __p + UNKNOWN\l"];
"__i_13";
"__i_3" [label="\N\n__i_13 = __i_3 + UNKNOWN\l"];
"_1" [label="\N\n_9 = *_1\l"];
"_9";
"_15";
"_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__i_13";
"STOREDANYTHING" -> "_1";
"__i_13" -> "__i_3";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__p" [label="\N\n_1 = __p + UNKNOWN\l"];
"__i_13";
"__i_3" [label="\N\n__i_13 = __i_3 + UNKNOWN\l"];
"_1" [label="\N\n_9 = *_1\l"];
"_9";
"_15";
"_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__i_13";
"STOREDANYTHING" -> "_1";
"__i_13" -> "__i_3";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__i_13 = { NULL NONLOCAL }
__i_3 = { NULL NONLOCAL }
_1 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_15 = { }
_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc = { }


Alias information for static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__p_8(D), points-to non-local, points-to NULL, points-to vars: { }

size_t __gnu_cxx::char_traits<char>::length (const char_type * __p)
{
  bool D.50010;
  size_t __i;
  const char_type D.13543;
  const char_type * _1;
  char _9;
  bool _15;
  const char_type _18(D);

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  __i_13 = __i_3 + 1;

  <bb 4> :
  # __i_3 = PHI <0(2), __i_13(3)>
  _1 = __p_8(D) + __i_3;
  _9 = *_1;
  _15 = _9 == 0;
  if (_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return __i_3;

}



;; Function std::char_traits<char>::length (_ZNSt11char_traitsIcE6lengthEPKc, funcdef_no=476, decl_uid=13412, cgraph_uid=126, symbol_order=135)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &NONLOCAL
CALLUSED(9) = CALLUSED(9) + UNKNOWN
CALLUSED(9) = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__s"[label="__s = { 5 }"];
"CALLUSED(9)";
"CALLCLOBBERED(10)";
"_ZNSt11char_traitsIcE6lengthEPKc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__s";
"*CALLUSED(9)";
"*CALLCLOBBERED(10)";
"*_ZNSt11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"__s" -> "CALLUSED(9)";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"CALLUSED(9)" [label="\N\nCALLUSED(9) = CALLUSED(9) + UNKNOWN\l"];
"CALLCLOBBERED(10)";
"_ZNSt11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(9)";
"__s" -> "CALLUSED(9)";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__s";
"CALLUSED(9)" [label="\N\nCALLUSED(9) = CALLUSED(9) + UNKNOWN\l"];
"CALLCLOBBERED(10)";
"_ZNSt11char_traitsIcE6lengthEPKc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(9)";
"__s" -> "CALLUSED(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { NONLOCAL }
CALLUSED(9) = { NONLOCAL }
CALLCLOBBERED(10) = { }
_ZNSt11char_traitsIcE6lengthEPKc = { }


Alias information for static constexpr std::size_t std::char_traits<char>::length(const char_type*)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__s_4(D), points-to non-local, points-to NULL, points-to vars: { }

size_t std::char_traits<char>::length (const char_type * __s)
{
  size_t __i;
  size_t D.50016;
  bool D.50013;
  size_t _7;

  <bb 2> :
  _7 = __builtin_strlen (__s_4(D));
  return _7;

}



;; Function std::operator| (_ZStorSt12_Ios_IostateS_, funcdef_no=1414, decl_uid=35467, cgraph_uid=473, symbol_order=502)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_3 = __a + UNKNOWN
_3 = __b + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__a"[label="__a = { 5 }"];
"__b"[label="__b = { 5 }"];
"_3";
"_ZStorSt12_Ios_IostateS_";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__a";
"*__b";
"*_3";
"*_ZStorSt12_Ios_IostateS_";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__a" [label="\N\n_3 = __a + UNKNOWN\l"];
"_3";
"_ZStorSt12_Ios_IostateS_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__a" [label="\N\n_3 = __a + UNKNOWN\l"];
"_3";
"_ZStorSt12_Ios_IostateS_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_3 = { NONLOCAL }
_ZStorSt12_Ios_IostateS_ = { }


Alias information for constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_Ios_Iostate std::operator| (_Ios_Iostate __a, _Ios_Iostate __b)
{
  _Ios_Iostate _3;

  <bb 2> :
  _3 = __a_1(D) | __b_2(D);
  return _3;

}



;; Function std::basic_ios<char>::setstate (_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate, funcdef_no=2139, decl_uid=41525, cgraph_uid=873, symbol_order=906)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__state = &NONLOCAL
_5 = *this + 256
_8 = _5 + UNKNOWN
_8 = __state + UNKNOWN
ESCAPED = this
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__state"[label="__state = { 5 }"];
"_5";
"_8";
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__state";
"*_5";
"*_8";
"*_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";

  // Edges in the constraint graph:
"this" -> "ESCAPED";
"_8" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_5 = *this + 256\l_8 = this + UNKNOWN\l"];
"_5" [label="\N\n_8 = _5 + UNKNOWN\l"];
"_8";
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_8";
"this" -> "ESCAPED";
"_8" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_5 = *this + 256\l_8 = this + UNKNOWN\l"];
"_5" [label="\N\n_8 = _5 + UNKNOWN\l"];
"_8";
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_8";
"this" -> "ESCAPED";
"_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__state = { NONLOCAL } same as this
_5 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }


Alias information for void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }

void std::basic_ios<char>::setstate (struct basic_ios * const this, iostate __state)
{
  iostate D.50023;
  _Ios_Iostate D.50021;
  _Ios_Iostate _5;
  _Ios_Iostate _8;

  <bb 2> :
  _5 = MEM[(const struct basic_ios *)this_4(D)].D.41638._M_streambuf_state;
  _8 = _5 | __state_7(D);
  std::basic_ios<char>::clear (this_4(D), _8);
  return;

}



;; Function std::operator<< <std::char_traits<char> > (_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, funcdef_no=2059, decl_uid=42572, cgraph_uid=793, symbol_order=826)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__out = &NONLOCAL
__s = &NONLOCAL
_1 = *__out
_3 = *_1 + -192
_4 = _3
_5 = __out + UNKNOWN
_11 = *_5 + 256
_17 = _11 + UNKNOWN
_17 = &NONLOCAL
ESCAPED = _5
ESCAPED = _17
CALLUSED(17) = CALLUSED(17) + UNKNOWN
CALLUSED(17) = __s
_7 = _18
ESCAPED = __out
ESCAPED = __s
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__out"[label="__out = { 5 }"];
"__s"[label="__s = { 5 }"];
"_1";
"_3";
"_4";
"_5";
"_11";
"_17"[label="_17 = { 5 }"];
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"CALLUSED(17)";
"CALLCLOBBERED(18)";
"_7";
"_18";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__out";
"*__s";
"*_1";
"*_3";
"*_4";
"*_5";
"*_11";
"*_17";
"*_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"*CALLUSED(17)";
"*CALLCLOBBERED(18)";
"*_7";
"*_18";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"*_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";

  // Edges in the constraint graph:
"__out" -> "ESCAPED";
"__s" -> "ESCAPED";
"_5" -> "ESCAPED";
"_17" -> "ESCAPED";
"_7" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*__out" -> "_1";
"_3" -> "_4";
"__s" -> "CALLUSED(17)";
"_18" -> "_7";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__out" [label="\N\n_1 = *__out\l_5 = __out + UNKNOWN\l"];
"_1" [label="\N\n_3 = *_1 + -192\l"];
"_3";
"_5" [label="\N\n_11 = *_5 + 256\l"];
"_11" [label="\N\n_17 = _11 + UNKNOWN\l"];
"_17";
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_7";
"_18";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "CALLUSED(17)";
"__out" -> "ESCAPED";
"__out" -> "CALLUSED(17)";
"_5" -> "ESCAPED";
"_17" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__out" [label="\N\n_1 = *__out\l_5 = __out + UNKNOWN\l"];
"_1" [label="\N\n_3 = *_1 + -192\l"];
"_3";
"_5" [label="\N\n_11 = *_5 + 256\l"];
"_11" [label="\N\n_17 = _11 + UNKNOWN\l"];
"_17";
"_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_7";
"_18";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "CALLUSED(17)";
"__out" -> "ESCAPED";
"__out" -> "CALLUSED(17)";
"_5" -> "ESCAPED";
"_17" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__out = { NONLOCAL }
__s = { NONLOCAL } same as __out
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
CALLUSED(17) = { NONLOCAL }
CALLCLOBBERED(18) = { }
_7 = { }
_18 = { }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }


Alias information for std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
__s_9(D), points-to non-local, points-to NULL, points-to vars: { }
__out_13(D), points-to non-local, points-to NULL, points-to vars: { }

struct basic_ostream & std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, const char * __s)
{
  size_t D.50028;
  int (*) () * _1;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  long int _7;
  _Ios_Iostate _11;
  _Ios_Iostate _17;
  long unsigned int _18;

  <bb 2> :
  if (__s_9(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = __out_13(D)->_vptr.basic_ostream;
  _3 = MEM[(long int *)_1 + -24B];
  _4 = (sizetype) _3;
  _5 = __out_13(D) + _4;
  _11 = MEM[(const struct basic_ios *)_5].D.41638._M_streambuf_state;
  _17 = _11 | 1;
  std::basic_ios<char>::clear (_5, _17);
  goto <bb 5>; [100.00%]

  <bb 4> :
  _18 = __builtin_strlen (__s_9(D));
  _7 = (long int) _18;
  std::__ostream_insert<char, std::char_traits<char> > (__out_13(D), __s_9(D), _7);

  <bb 5> :
  return __out_13(D);

}



;; Function std::ctype<char>::widen (_ZNKSt5ctypeIcE5widenEc, funcdef_no=1560, decl_uid=38013, cgraph_uid=531, symbol_order=560)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL
_1 = *this + 448
__c.1_2 = __c
_3 = __c.1_2
_17 = *this + UNKNOWN
ESCAPED = this
_4 = *this
_6 = *_4 + 384
_7 = __c
ESCAPED = this
ESCAPED = _7
_15 = NONLOCAL
_8 = _17
_8 = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__c"[label="__c = { 5 }"];
"_1";
"__c.1_2";
"_3";
"_17";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_4";
"_6";
"_7";
"_15";
"_8";
"_ZNKSt5ctypeIcE5widenEc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__c";
"*_1";
"*__c.1_2";
"*_3";
"*_17";
"*_ZNKSt5ctypeIcE13_M_widen_initEv";
"*_4";
"*_6";
"*_7";
"*_15";
"*_8";
"*_ZNKSt5ctypeIcE5widenEc";

  // Edges in the constraint graph:
"this" -> "ESCAPED";
"_7" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__c" -> "__c.1_2";
"__c.1_2" -> "_3";
"*this" -> "_4";
"__c" -> "_7";
"NONLOCAL" -> "_15";
"_17" -> "_8";
"_15" -> "_8";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_1 = *this + 448\l_17 = *this + UNKNOWN\l_4 = *this\l"];
"_1";
"_17";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_4" [label="\N\n_6 = *_4 + 384\l"];
"_6";
"_15";
"_8";
"_ZNKSt5ctypeIcE5widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_6";
"this" -> "ESCAPED";
"_17" -> "_8";
"_15" -> "_8";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _15\l"];
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_1 = *this + 448\l_17 = *this + UNKNOWN\l_4 = *this\l"];
"_1";
"_17";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_4" [label="\N\n_6 = *_4 + 384\l"];
"_6";
"_15";
"_8";
"_ZNKSt5ctypeIcE5widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_6";
"this" -> "ESCAPED";
"_17" -> "_8";
"_15" -> "ESCAPED";
"_15" -> "_1";
"_15" -> "_17";
"_15" -> "_4";
"_15" -> "_6";
"_15" -> "_8";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _15
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
__c.1_2 = { NONLOCAL } same as this
_3 = { NONLOCAL } same as this
_17 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE13_M_widen_initEv = { }
_4 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { NONLOCAL } same as this
_15 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE5widenEc = { }


Alias information for std::ctype<char>::char_type std::ctype<char>::widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_11(D), points-to non-local, points-to NULL, points-to vars: { }

char_type std::ctype<char>::widen (const struct ctype * const this, char __c)
{
  char _1;
  unsigned char __c.1_2;
  int _3;
  int (*) () * _4;
  int (*) () _6;
  int _7;
  char_type _8;
  char_type _15;
  char_type _17;

  <bb 2> :
  _1 = this_11(D)->_M_widen_ok;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __c.1_2 = (unsigned char) __c_13(D);
  _3 = (int) __c.1_2;
  _17 = this_11(D)->_M_widen[_3];
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  std::ctype<char>::_M_widen_init (this_11(D));
  _4 = this_11(D)->D.38127._vptr.facet;
  _6 = MEM[(int (*) () *)_4 + 48B];
  _7 = (int) __c_13(D);
  _15 = OBJ_TYPE_REF(_6;(const struct ctype)this_11(D)->6) (this_11(D), _7);

  <bb 5> :
  # _8 = PHI <_17(3), _15(4)>
  return _8;

}



;; Function std::ctype<char>::do_widen (_ZNKSt5ctypeIcE8do_widenEc, funcdef_no=1565, decl_uid=38061, cgraph_uid=536, symbol_order=565)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__c"[label="__c = { 5 }"];
"_ZNKSt5ctypeIcE8do_widenEc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__c";
"*_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_ZNKSt5ctypeIcE8do_widenEc = { }


Alias information for virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


char_type std::ctype<char>::do_widen (const struct ctype * const this, char __c)
{
  <bb 2> :
  return __c_1(D);

}



;; Function main (main, funcdef_no=1812, decl_uid=45098, cgraph_uid=546, symbol_order=576)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZSt3cin.0+64 = NONLOCAL
_ZSt3cin.64+64 = NONLOCAL
_ZSt3cin.128+64 = NONLOCAL
_ZSt3cin.192+224 = NONLOCAL
_ZSt3cin.448+64 = NONLOCAL
_ZSt3cin.512+64 = NONLOCAL
_ZSt3cin.576+1120 = NONLOCAL
_ZSt3cin.1728+64 = NONLOCAL
_ZSt3cin.1792+64 = NONLOCAL
_ZSt3cin.1856+64 = NONLOCAL
_ZSt3cin.1920+16 = NONLOCAL
_ZSt3cin.1984+64 = NONLOCAL
_ZSt3cin.2048+64 = NONLOCAL
_ZSt3cin.2112+64 = NONLOCAL
_ZSt3cin.2176+64 = NONLOCAL
ESCAPED = &_ZSt3cin.0+64
ESCAPED = &n
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NULL
_20 = NONLOCAL
ESCAPED = _20
_39 = NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NONLOCAL
_25 = NONLOCAL
ESCAPED = _25
_42 = NONLOCAL
b_30 = a_7 + UNKNOWN
b_30 = b_8 + UNKNOWN
ESCAPED = &_ZSt4cout.0+64
ESCAPED = b_30
_32 = NONLOCAL
ESCAPED = _32
_43 = NONLOCAL
i_35 = i_9 + UNKNOWN
i_35 = &NONLOCAL
a_7 = &NULL
a_7 = b_8
b_8 = &NONLOCAL
b_8 = b_30
i_9 = &NONLOCAL
i_9 = i_35
n.0_6 = n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 8 23 24 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"n";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZNSolsEi";
"_20";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"_39";
"_25";
"_42";
"b_30";
"a_7"[label="a_7 = { 1 }"];
"b_8"[label="b_8 = { 5 }"];
"_32";
"_43";
"i_35"[label="i_35 = { 5 }"];
"i_9"[label="i_9 = { 5 }"];
"n.0_6";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_ZSt3cin.0+64";
"*_ZSt3cin.64+64";
"*_ZSt3cin.128+64";
"*_ZSt3cin.192+224";
"*_ZSt3cin.448+64";
"*_ZSt3cin.512+64";
"*_ZSt3cin.576+1120";
"*_ZSt3cin.1728+64";
"*_ZSt3cin.1792+64";
"*_ZSt3cin.1856+64";
"*_ZSt3cin.1920+16";
"*_ZSt3cin.1984+64";
"*_ZSt3cin.2048+64";
"*_ZSt3cin.2112+64";
"*_ZSt3cin.2176+64";
"*n";
"*_ZSt4cout.0+64";
"*_ZSt4cout.64+64";
"*_ZSt4cout.128+224";
"*_ZSt4cout.384+64";
"*_ZSt4cout.448+64";
"*_ZSt4cout.512+1120";
"*_ZSt4cout.1664+64";
"*_ZSt4cout.1728+64";
"*_ZSt4cout.1792+64";
"*_ZSt4cout.1856+16";
"*_ZSt4cout.1920+64";
"*_ZSt4cout.1984+64";
"*_ZSt4cout.2048+64";
"*_ZSt4cout.2112+64";
"*_ZNSirsERi";
"*_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"*_ZNSolsEi";
"*_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"*_39";
"*_42";
"*b_30";
"*a_7";
"*b_8";
"*_43";
"*i_35";
"*i_9";
"*n.0_6";
"*main";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_20" -> "ESCAPED";
"_25" -> "ESCAPED";
"b_30" -> "ESCAPED";
"_32" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZSt3cin.0+64";
"NONLOCAL" -> "_ZSt3cin.64+64";
"NONLOCAL" -> "_ZSt3cin.128+64";
"NONLOCAL" -> "_ZSt3cin.192+224";
"NONLOCAL" -> "_ZSt3cin.448+64";
"NONLOCAL" -> "_ZSt3cin.512+64";
"NONLOCAL" -> "_ZSt3cin.576+1120";
"NONLOCAL" -> "_ZSt3cin.1728+64";
"NONLOCAL" -> "_ZSt3cin.1792+64";
"NONLOCAL" -> "_ZSt3cin.1856+64";
"NONLOCAL" -> "_ZSt3cin.1920+16";
"NONLOCAL" -> "_ZSt3cin.1984+64";
"NONLOCAL" -> "_ZSt3cin.2048+64";
"NONLOCAL" -> "_ZSt3cin.2112+64";
"NONLOCAL" -> "_ZSt3cin.2176+64";
"NONLOCAL" -> "_ZSt4cout.0+64";
"NONLOCAL" -> "_ZSt4cout.64+64";
"NONLOCAL" -> "_ZSt4cout.128+224";
"NONLOCAL" -> "_ZSt4cout.384+64";
"NONLOCAL" -> "_ZSt4cout.448+64";
"NONLOCAL" -> "_ZSt4cout.512+1120";
"NONLOCAL" -> "_ZSt4cout.1664+64";
"NONLOCAL" -> "_ZSt4cout.1728+64";
"NONLOCAL" -> "_ZSt4cout.1792+64";
"NONLOCAL" -> "_ZSt4cout.1856+16";
"NONLOCAL" -> "_ZSt4cout.1920+64";
"NONLOCAL" -> "_ZSt4cout.1984+64";
"NONLOCAL" -> "_ZSt4cout.2048+64";
"NONLOCAL" -> "_ZSt4cout.2112+64";
"NONLOCAL" -> "_20";
"NONLOCAL" -> "_39";
"NONLOCAL" -> "_25";
"NONLOCAL" -> "_42";
"b_8" -> "a_7";
"b_30" -> "b_8";
"NONLOCAL" -> "_32";
"NONLOCAL" -> "_43";
"i_35" -> "i_9";
"n" -> "n.0_6";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZNSolsEi";
"_20";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"b_30";
"a_7" [label="\N\nb_30 = a_7 + UNKNOWN\l"];
"b_8" [label="\N\nb_30 = b_8 + UNKNOWN\l"];
"i_35" [label="\N\ni_35 = i_35 + UNKNOWN\l"];
"n.0_6";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_6";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "b_30";
"STOREDANYTHING" -> "i_35";
"_20" -> "ESCAPED";
"_20" -> "_ZSt3cin.0+64";
"_20" -> "_ZSt3cin.64+64";
"_20" -> "_ZSt3cin.128+64";
"_20" -> "_ZSt3cin.192+224";
"_20" -> "_ZSt3cin.448+64";
"_20" -> "_ZSt3cin.512+64";
"_20" -> "_ZSt3cin.576+1120";
"_20" -> "_ZSt3cin.1728+64";
"_20" -> "_ZSt3cin.1792+64";
"_20" -> "_ZSt3cin.1856+64";
"_20" -> "_ZSt3cin.1920+16";
"_20" -> "_ZSt3cin.1984+64";
"_20" -> "_ZSt3cin.2048+64";
"_20" -> "_ZSt3cin.2112+64";
"_20" -> "_ZSt3cin.2176+64";
"_20" -> "_ZSt4cout.0+64";
"_20" -> "_ZSt4cout.64+64";
"_20" -> "_ZSt4cout.128+224";
"_20" -> "_ZSt4cout.384+64";
"_20" -> "_ZSt4cout.448+64";
"_20" -> "_ZSt4cout.512+1120";
"_20" -> "_ZSt4cout.1664+64";
"_20" -> "_ZSt4cout.1728+64";
"_20" -> "_ZSt4cout.1792+64";
"_20" -> "_ZSt4cout.1856+16";
"_20" -> "_ZSt4cout.1920+64";
"_20" -> "_ZSt4cout.1984+64";
"_20" -> "_ZSt4cout.2048+64";
"_20" -> "_ZSt4cout.2112+64";
"b_30" -> "ESCAPED";
"b_30" -> "b_8";
"b_8" -> "a_7";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _20\l"];
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l";
"_ZNSolsEi";
"_20";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"b_30";
"a_7" [label="\N\nb_30 = a_7 + UNKNOWN\l"];
"b_8" [label="\N\nb_30 = b_8 + UNKNOWN\l"];
"i_35" [label="\N\ni_35 = i_35 + UNKNOWN\l"];
"n.0_6";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_6";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "b_30";
"STOREDANYTHING" -> "i_35";
"_ZSt3cin.0+64" -> "ESCAPED";
"_ZSt3cin.64+64" -> "ESCAPED";
"_ZSt3cin.128+64" -> "ESCAPED";
"_ZSt3cin.192+224" -> "ESCAPED";
"_ZSt3cin.448+64" -> "ESCAPED";
"_ZSt3cin.512+64" -> "ESCAPED";
"_ZSt3cin.576+1120" -> "ESCAPED";
"_ZSt3cin.1728+64" -> "ESCAPED";
"_ZSt3cin.1792+64" -> "ESCAPED";
"_ZSt3cin.1856+64" -> "ESCAPED";
"_ZSt3cin.1920+16" -> "ESCAPED";
"_ZSt3cin.1984+64" -> "ESCAPED";
"_ZSt3cin.2048+64" -> "ESCAPED";
"_ZSt3cin.2112+64" -> "ESCAPED";
"_ZSt3cin.2176+64" -> "ESCAPED";
"_ZSt4cout.0+64" -> "ESCAPED";
"_ZSt4cout.64+64" -> "ESCAPED";
"_ZSt4cout.128+224" -> "ESCAPED";
"_ZSt4cout.384+64" -> "ESCAPED";
"_ZSt4cout.448+64" -> "ESCAPED";
"_ZSt4cout.512+1120" -> "ESCAPED";
"_ZSt4cout.1664+64" -> "ESCAPED";
"_ZSt4cout.1728+64" -> "ESCAPED";
"_ZSt4cout.1792+64" -> "ESCAPED";
"_ZSt4cout.1856+16" -> "ESCAPED";
"_ZSt4cout.1920+64" -> "ESCAPED";
"_ZSt4cout.1984+64" -> "ESCAPED";
"_ZSt4cout.2048+64" -> "ESCAPED";
"_ZSt4cout.2112+64" -> "ESCAPED";
"_20" -> "ESCAPED";
"_20" -> "_ZSt3cin.0+64";
"_20" -> "_ZSt3cin.64+64";
"_20" -> "_ZSt3cin.128+64";
"_20" -> "_ZSt3cin.192+224";
"_20" -> "_ZSt3cin.448+64";
"_20" -> "_ZSt3cin.512+64";
"_20" -> "_ZSt3cin.576+1120";
"_20" -> "_ZSt3cin.1728+64";
"_20" -> "_ZSt3cin.1792+64";
"_20" -> "_ZSt3cin.1856+64";
"_20" -> "_ZSt3cin.1920+16";
"_20" -> "_ZSt3cin.1984+64";
"_20" -> "_ZSt3cin.2048+64";
"_20" -> "_ZSt3cin.2112+64";
"_20" -> "_ZSt3cin.2176+64";
"_20" -> "_ZSt4cout.0+64";
"_20" -> "_ZSt4cout.64+64";
"_20" -> "_ZSt4cout.128+224";
"_20" -> "_ZSt4cout.384+64";
"_20" -> "_ZSt4cout.448+64";
"_20" -> "_ZSt4cout.512+1120";
"_20" -> "_ZSt4cout.1664+64";
"_20" -> "_ZSt4cout.1728+64";
"_20" -> "_ZSt4cout.1792+64";
"_20" -> "_ZSt4cout.1856+16";
"_20" -> "_ZSt4cout.1920+64";
"_20" -> "_ZSt4cout.1984+64";
"_20" -> "_ZSt4cout.2048+64";
"_20" -> "_ZSt4cout.2112+64";
"_20" -> "n.0_6";
"b_30" -> "ESCAPED";
"b_30" -> "b_8";
"b_8" -> "a_7";
"n.0_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZSt3cin.0+64 _ZSt3cin.64+64 _ZSt3cin.128+64 _ZSt3cin.192+224 _ZSt3cin.448+64 _ZSt3cin.512+64 _ZSt3cin.576+1120 _ZSt3cin.1728+64 _ZSt3cin.1792+64 _ZSt3cin.1856+64 _ZSt3cin.1920+16 _ZSt3cin.1984+64 _ZSt3cin.2048+64 _ZSt3cin.2112+64 _ZSt3cin.2176+64 n _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
NONLOCAL = { ESCAPED NONLOCAL } same as _20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZSt3cin.0+64 = { ESCAPED NONLOCAL }
_ZSt3cin.64+64 = { ESCAPED NONLOCAL }
_ZSt3cin.128+64 = { ESCAPED NONLOCAL }
_ZSt3cin.192+224 = { ESCAPED NONLOCAL }
_ZSt3cin.448+64 = { ESCAPED NONLOCAL }
_ZSt3cin.512+64 = { ESCAPED NONLOCAL }
_ZSt3cin.576+1120 = { ESCAPED NONLOCAL }
_ZSt3cin.1728+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1792+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1856+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1920+16 = { ESCAPED NONLOCAL }
_ZSt3cin.1984+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2048+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2112+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2176+64 = { ESCAPED NONLOCAL }
n = { ESCAPED NONLOCAL } same as n.0_6
_ZSt4cout.0+64 = { ESCAPED NONLOCAL }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
_ZNSirsERi = { }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
_ZNSolsEi = { }
_20 = { ESCAPED NONLOCAL }
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
_39 = { ESCAPED NONLOCAL } same as _20
_25 = { ESCAPED NONLOCAL } same as _20
_42 = { ESCAPED NONLOCAL } same as _20
b_30 = { NULL NONLOCAL }
a_7 = { NULL NONLOCAL }
b_8 = { NULL NONLOCAL }
_32 = { ESCAPED NONLOCAL } same as _20
_43 = { ESCAPED NONLOCAL } same as _20
i_35 = { NONLOCAL }
i_9 = { NONLOCAL } same as i_35
n.0_6 = { ESCAPED NONLOCAL }
main = { }


Alias information for int main()

Aliased symbols

n, UID D.45104, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.45089 D.45090 D.45104 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

int main ()
{
  struct basic_ostream & D.50052;
  struct basic_ostream & D.50046;
  int n;
  int t;
  int i;
  int b;
  int a;
  int n.0_6;
  struct basic_ostream & _20;
  struct basic_ostream & _25;
  struct basic_ostream & _32;
  struct __ostream_type & _39;
  struct __ostream_type & _42;
  struct __ostream_type & _43;

  <bb 2> :
  std::basic_istream<char>::operator>> (&cin, &n);

  <bb 3> :
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "a=", 2);

  <bb 4> :
  _20 = std::basic_ostream<char>::operator<< (&cout, 0);

  <bb 5> :
  _39 = std::endl<char, std::char_traits<char> > (_20);

  <bb 6> :
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "X=", 2);

  <bb 7> :
  _25 = std::basic_ostream<char>::operator<< (&cout, 10);

  <bb 8> :
  _42 = std::endl<char, std::char_traits<char> > (_25);
  goto <bb 12>; [100.00%]

  <bb 9> :
  b_30 = a_7 + b_8;
  _32 = std::basic_ostream<char>::operator<< (&cout, b_30);

  <bb 10> :
  _43 = std::endl<char, std::char_traits<char> > (_32);

  <bb 11> :
  i_35 = i_9 + 1;

  <bb 12> :
  # a_7 = PHI <0(8), b_8(11)>
  # b_8 = PHI <1(8), b_30(11)>
  # i_9 = PHI <1(8), i_35(11)>
  n.0_6 = n;
  if (n.0_6 > i_9)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  n ={v} {CLOBBER};
  return 0;

  <bb 14> :
<L4>:
  n ={v} {CLOBBER};
  resx 1

}



;; Function std::__check_facet<std::ctype<char> > (_ZSt13__check_facetISt5ctypeIcEERKT_PS3_, funcdef_no=2185, decl_uid=48203, cgraph_uid=919, symbol_order=952)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__f = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__f"[label="__f = { 5 }"];
"_ZSt16__throw_bad_castv";
"_ZSt13__check_facetISt5ctypeIcEERKT_PS3_";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__f";
"*_ZSt16__throw_bad_castv";
"*_ZSt13__check_facetISt5ctypeIcEERKT_PS3_";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__f";
"_ZSt16__throw_bad_castv";
"_ZSt13__check_facetISt5ctypeIcEERKT_PS3_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__f";
"_ZSt16__throw_bad_castv";
"_ZSt13__check_facetISt5ctypeIcEERKT_PS3_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__f = { NONLOCAL }
_ZSt16__throw_bad_castv = { }
_ZSt13__check_facetISt5ctypeIcEERKT_PS3_ = { }


Alias information for const _Facet& std::__check_facet(const _Facet*) [with _Facet = std::ctype<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__f_1(D), points-to non-local, points-to NULL, points-to vars: { }

const struct ctype & std::__check_facet<std::ctype<char> > (const struct ctype * __f)
{
  <bb 2> :
  if (__f_1(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  std::__throw_bad_cast ();

  <bb 4> :
  return __f_1(D);

}



;; Function std::basic_ios<char>::widen (_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc, funcdef_no=2140, decl_uid=41575, cgraph_uid=874, symbol_order=907)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL
_1 = *this + 1920
_3 = __c
_13 = *_1 + 448
__c.1_14 = __c
_15 = __c.1_14
_16 = *_1 + UNKNOWN
_17 = __c
ESCAPED = _1
ESCAPED = _17
_18 = NONLOCAL
_19 = _16
_19 = _18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__c"[label="__c = { 5 }"];
"_1";
"_ZSt16__throw_bad_castv";
"_3";
"_13";
"__c.1_14";
"_15";
"_16";
"_17";
"_ZNKSt5ctypeIcE5widenEc.part.0";
"_18";
"_19";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__c";
"*_1";
"*_ZSt16__throw_bad_castv";
"*_3";
"*_13";
"*__c.1_14";
"*_15";
"*_16";
"*_17";
"*_ZNKSt5ctypeIcE5widenEc.part.0";
"*_18";
"*_19";
"*_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";

  // Edges in the constraint graph:
"_1" -> "ESCAPED";
"_17" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__c" -> "_3";
"__c" -> "__c.1_14";
"__c.1_14" -> "_15";
"__c" -> "_17";
"NONLOCAL" -> "_18";
"_16" -> "_19";
"_18" -> "_19";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_1 = *this + 1920\l"];
"_1" [label="\N\n_13 = *_1 + 448\l_16 = *_1 + UNKNOWN\l"];
"_ZSt16__throw_bad_castv";
"_13";
"_16";
"_ZNKSt5ctypeIcE5widenEc.part.0";
"_18";
"_19";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"this" -> "ESCAPED";
"_1" -> "ESCAPED";
"_16" -> "_19";
"_18" -> "_19";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _18\l"];
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n_1 = *this + 1920\l"];
"_1" [label="\N\n_13 = *_1 + 448\l_16 = *_1 + UNKNOWN\l"];
"_ZSt16__throw_bad_castv";
"_13";
"_16";
"_ZNKSt5ctypeIcE5widenEc.part.0";
"_18";
"_19";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"this" -> "ESCAPED";
"_1" -> "ESCAPED";
"_16" -> "_19";
"_18" -> "ESCAPED";
"_18" -> "_1";
"_18" -> "_13";
"_18" -> "_16";
"_18" -> "_19";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _18
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_ZSt16__throw_bad_castv = { }
_3 = { NONLOCAL } same as this
_13 = { ESCAPED NONLOCAL }
__c.1_14 = { NONLOCAL } same as this
_15 = { NONLOCAL } same as this
_16 = { ESCAPED NONLOCAL }
_17 = { NONLOCAL } same as this
_ZNKSt5ctypeIcE5widenEc.part.0 = { }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc = { }


Alias information for std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }

char_type std::basic_ios<char>::widen (const struct basic_ios * const this, char __c)
{
  const struct ctype & D.50065;
  char_type D.50063;
  char __c;
  const struct __ctype_type * _1;
  int _3;
  char _13;
  unsigned char __c.1_14;
  int _15;
  char _16;
  int _17;
  char _18;
  char _19;

  <bb 2> :
  _1 = this_5(D)->_M_ctype;
  if (_1 == 0B)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> :
  std::__throw_bad_cast ();

  <bb 4> :
  _3 = (int) __c_8(D);
  _13 = MEM[(const struct ctype *)_1]._M_widen_ok;
  if (_13 != 0)
    goto <bb 5>; [51.12%]
  else
    goto <bb 6>; [48.88%]

  <bb 5> :
  __c.1_14 = (unsigned char) __c_8(D);
  _15 = (int) __c.1_14;
  _16 = MEM[(const struct ctype *)_1]._M_widen[_15];
  goto <bb 7>; [100.00%]

  <bb 6> :
  _17 = (int) __c_8(D);
  _18 = std::ctype<char>::_ZNKSt5ctypeIcE5widenEc.part.0 (_1, _17);

  <bb 7> :
  # _19 = PHI <_16(5), _18(6)>
  return _19;

}



;; Function std::endl<char, std::char_traits<char> > (_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, funcdef_no=2060, decl_uid=42529, cgraph_uid=794, symbol_order=827)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
_1 = *__os
_3 = *_1 + -192
_4 = _3
_5 = __os + UNKNOWN
callarg(16) = _5
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
CALLCLOBBERED(15) = callarg(16)
*callarg(16) = NONLOCAL
ESCAPED = *callarg(16) + UNKNOWN
ESCAPED = &NONLOCAL
_12 = CALLUSED(14) + UNKNOWN
_12 = NONLOCAL
_7 = _12
ESCAPED = __os
ESCAPED = _7
_14 = NONLOCAL
ESCAPED = _14
_18 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__os"[label="__os = { 5 }"];
"_1";
"_3";
"_4";
"_5";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";
"CALLUSED(14)";
"CALLCLOBBERED(15)";
"callarg(16)";
"_12";
"_7";
"_ZNSo3putEc";
"_14";
"_ZNSo5flushEv";
"_18";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__os";
"*_1";
"*_3";
"*_4";
"*_5";
"*_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";
"*CALLUSED(14)";
"*CALLCLOBBERED(15)";
"*callarg(16)";
"*_ZNSo3putEc";
"*_ZNSo5flushEv";
"*_18";
"*_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__os" -> "ESCAPED";
"_7" -> "ESCAPED";
"_14" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"*__os" -> "_1";
"_3" -> "_4";
"callarg(16)" -> "CALLUSED(14)";
"callarg(16)" -> "CALLCLOBBERED(15)";
"_5" -> "callarg(16)";
"NONLOCAL" -> "_12";
"_12" -> "_7";
"NONLOCAL" -> "_14";
"NONLOCAL" -> "_18";
"NONLOCAL" -> "*callarg(16)";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__os" [label="\N\n_1 = *__os\l_5 = __os + UNKNOWN\l"];
"_1" [label="\N\n_3 = *_1 + -192\l"];
"_3";
"_5";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";
"callarg(16)" [label="\N\nESCAPED = *callarg(16) + UNKNOWN\lcallarg(16) = callarg(16) + UNKNOWN\lcallarg(16) = *callarg(16) + UNKNOWN\l_12 = callarg(16) + UNKNOWN\l*callarg(16) = NONLOCAL\l"];
"_12";
"_ZNSo3putEc";
"_14";
"_ZNSo5flushEv";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "callarg(16)";
"STOREDANYTHING" -> "_12";
"__os" -> "ESCAPED";
"_5" -> "callarg(16)";
"_12" -> "ESCAPED";
"_14" -> "ESCAPED";
"_14" -> "_12";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _14\l"];
"STOREDANYTHING";
"INTEGER";
"__os" [label="\N\n_1 = *__os\l_5 = __os + UNKNOWN\l"];
"_1" [label="\N\n_3 = *_1 + -192\l"];
"_3";
"_5";
"_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc";
"callarg(16)" [label="\N\nESCAPED = *callarg(16) + UNKNOWN\lcallarg(16) = callarg(16) + UNKNOWN\lcallarg(16) = *callarg(16) + UNKNOWN\l_12 = callarg(16) + UNKNOWN\l*callarg(16) = _14\l"];
"_12";
"_ZNSo3putEc";
"_14";
"_ZNSo5flushEv";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "callarg(16)";
"STOREDANYTHING" -> "_12";
"__os" -> "ESCAPED";
"_5" -> "callarg(16)";
"_12" -> "ESCAPED";
"_14" -> "ESCAPED";
"_14" -> "_1";
"_14" -> "_3";
"_14" -> "callarg(16)";
"_14" -> "_12";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _14
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc = { }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callarg(16)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL } same as callarg(16)
callarg(16) = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _12
_ZNSo3putEc = { }
_14 = { ESCAPED NONLOCAL }
_ZNSo5flushEv = { }
_18 = { ESCAPED NONLOCAL } same as _14
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }


Alias information for std::basic_ostream<_CharT, _Traits>& std::endl(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
__os_10(D), points-to non-local, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::endl<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & D.50068;
  int (*) () * _1;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  int _7;
  char _12;
  struct basic_ostream & _14;
  struct basic_ostream & _18;

  <bb 2> :
  _1 = __os_10(D)->_vptr.basic_ostream;
  _3 = MEM[(long int *)_1 + -24B];
  _4 = (sizetype) _3;
  _5 = __os_10(D) + _4;
  _12 = std::basic_ios<char>::widen (_5, 10);
  _7 = (int) _12;
  _14 = std::basic_ostream<char>::put (__os_10(D), _7);
  _18 = std::basic_ostream<char>::flush (_14);
  return _18;

}



;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=2302, decl_uid=49917, cgraph_uid=1036, symbol_order=1211)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZStL8__ioinit = NONLOCAL
ESCAPED = &_ZStL8__ioinit
ESCAPED = &_ZNSt8ios_base4InitD1Ev
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 8 9 10 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_ZStL8__ioinit";
"*_ZNSt8ios_base4InitD1Ev";
"*__dso_handle";
"*_ZNSt8ios_base4InitC1Ev";
"*__cxa_atexit";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "_ZNSt8ios_base4InitD1Ev";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
"_ZStL8__ioinit" -> "ESCAPED";
"_ZNSt8ios_base4InitD1Ev" -> "ESCAPED";
"__dso_handle" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZStL8__ioinit = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitD1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitC1Ev = { }
__cxa_atexit = { }


Alias information for (static initializers for ../fib.cpp)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.45097 D.49916 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


void _GLOBAL__sub_I_main ()
{
  <bb 2> :
  std::ios_base::Init::Init (&__ioinit);
  __cxxabiv1::__cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);
  return;

}


