
;; Function main (main, funcdef_no=0, decl_uid=2346, cgraph_uid=1, symbol_order=0)

int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int D.2356;
  int _8;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_4 = 0;
  b_5 = 1;
  i_6 = 1;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  t_10 = b_2;
  b_11 = a_1 + b_2;
  a_12 = t_10;
  i_13 = i_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # a_1 = PHI <a_4(2), a_12(3)>
  # b_2 = PHI <b_5(2), b_11(3)>
  # i_3 = PHI <i_6(2), i_13(3)>
  if (i_3 < n_7(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _8 = 0;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _8;
;;    succ:       EXIT

}



Partition map 

Partition 1 (a_1 - 1 )
Partition 2 (b_2 - 2 )
Partition 3 (i_3 - 3 )
Partition 4 (a_4 - 4 )
Partition 5 (b_5 - 5 )
Partition 6 (i_6 - 6 )
Partition 7 (n_7(D) - 7 )
Partition 8 (_8 - 8 )
Partition 10 (t_10 - 10 )
Partition 11 (b_11 - 11 )
Partition 12 (a_12 - 12 )
Partition 13 (i_13 - 13 )
Partition 14 (_14(D) - 14 )


Coalescible Partition map 

Partition 0, base 0 (a_1 - 1 4 12 )
Partition 1, base 1 (b_2 - 2 5 11 )
Partition 2, base 2 (i_3 - 3 6 13 )
Partition 6, base 3 (n_7(D) - 7 )
Partition 10, base 4 (_14(D) - 14 )


Partition map 

Partition 0 (a_1 - 1 )
Partition 1 (b_2 - 2 )
Partition 2 (i_3 - 3 )
Partition 3 (a_4 - 4 )
Partition 4 (b_5 - 5 )
Partition 5 (i_6 - 6 )
Partition 6 (n_7(D) - 7 )
Partition 7 (b_11 - 11 )
Partition 8 (a_12 - 12 )
Partition 9 (i_13 - 13 )
Partition 10 (_14(D) - 14 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) a_1 <-> a_4
(2147483646, 0) a_1 <-> a_12
(2147483646, 0) b_2 <-> b_5
(2147483646, 0) b_2 <-> b_11
(2147483646, 0) i_3 <-> i_6
(2147483646, 0) i_3 <-> i_13

Partition map 

Partition 0 (a_1 - 1 )
Partition 1 (b_2 - 2 )
Partition 2 (i_3 - 3 )
Partition 3 (a_4 - 4 )
Partition 4 (b_5 - 5 )
Partition 5 (i_6 - 6 )
Partition 6 (n_7(D) - 7 )
Partition 7 (b_11 - 11 )
Partition 8 (a_12 - 12 )
Partition 9 (i_13 - 13 )
Partition 10 (_14(D) - 14 )

Coalesce list: (1)a_1 & (4)a_4 [map: 0, 3] : Success -> 0
Coalesce list: (1)a_1 & (12)a_12 [map: 0, 8] : Success -> 0
Coalesce list: (2)b_2 & (5)b_5 [map: 1, 4] : Success -> 1
Coalesce list: (2)b_2 & (11)b_11 [map: 1, 7] : Success -> 1
Coalesce list: (3)i_3 & (6)i_6 [map: 2, 5] : Success -> 2
Coalesce list: (3)i_3 & (13)i_13 [map: 2, 9] : Success -> 2
After Coalescing:

Partition map 

Partition 0 (a_1 - 1 4 12 )
Partition 1 (b_2 - 2 5 11 )
Partition 2 (i_3 - 3 6 13 )
Partition 3 (n_7(D) - 7 )
Partition 4 (_8 - 8 )
Partition 5 (t_10 - 10 )
Partition 6 (_14(D) - 14 )

int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int D.2356;
  int _8;
  int _14(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_4 = 0;
  b_5 = 1;
  i_6 = 1;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  t_10 = b_2;
  b_11 = a_1 + b_2;
  a_12 = t_10;
  i_13 = i_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # a_1 = PHI <a_4(2), a_12(3)>
  # b_2 = PHI <b_5(2), b_11(3)>
  # i_3 = PHI <i_6(2), i_13(3)>
  if (i_3 < n_7(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _8 = 0;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _8;
;;    succ:       EXIT

}


Partition 4: size 4 align 4
	t_10
Partition 3: size 4 align 4
	n_7(D)
Partition 2: size 4 align 4
	i_3
Partition 1: size 4 align 4
	b_2
Partition 0: size 4 align 4
	a_1

;; Generating RTL for gimple basic block 2

;; a_4 = 0;

(insn 5 4 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (const_int 0 [0])) "../main.cpp":5:4 -1
     (nil))

;; b_5 = 1;

(insn 6 5 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
        (const_int 1 [0x1])) "../main.cpp":6:4 -1
     (nil))

;; i_6 = 1;

(insn 7 6 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "../main.cpp":7:4 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; t_10 = b_2;

(insn 11 10 12 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])) "../main.cpp":10:5 -1
     (nil))

(insn 12 11 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 t+0 S4 A32])
        (reg:SI 84)) "../main.cpp":10:5 -1
     (nil))

;; b_11 = a_1 + b_2;

(insn 13 12 14 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "../main.cpp":11:5 -1
     (nil))

(insn 14 13 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
                    (reg:SI 85)))
            (clobber (reg:CC 17 flags))
        ]) "../main.cpp":11:5 -1
     (nil))

;; a_12 = t_10;

(insn 15 14 16 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 t+0 S4 A32])) "../main.cpp":12:5 -1
     (nil))

(insn 16 15 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (reg:SI 86)) "../main.cpp":12:5 -1
     (nil))

;; i_13 = i_3 + 1;

(insn 17 16 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../main.cpp":13:5 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 17 19 2 (nil) [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_3 < n_7(D))

(insn 21 19 22 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "../main.cpp":8:11 -1
     (nil))

(insn 22 21 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 87)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 n+0 S4 A64]))) "../main.cpp":8:11 -1
     (nil))

(jump_insn 23 22 0 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "../main.cpp":8:11 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _8 = 0;

(insn 25 24 0 (set (reg:SI 82 [ _8 ])
        (const_int 0 [0])) "../main.cpp":15:1 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3>:

(code_label 26 25 27 4 (nil) [0 uses])

(note 27 26 0 NOTE_INSN_BASIC_BLOCK)

;; return _8;

(insn 28 27 29 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _8 ])) "../main.cpp":15:1 -1
     (nil))

(jump_insn 29 28 30 (set (pc)
        (label_ref 0)) "../main.cpp":15:1 -1
     (nil))

(barrier 30 29 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 29.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (const_int 0 [0])) "../main.cpp":5:4 -1
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
        (const_int 1 [0x1])) "../main.cpp":6:4 -1
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "../main.cpp":7:4 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 18)) "../main.cpp":8:2 -1
     (nil)
 -> 18)
;;  succ:       5

(barrier 9 8 20)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 20 9 10 4 3 (nil) [1 uses])
(note 10 20 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])) "../main.cpp":10:5 -1
     (nil))
(insn 12 11 13 4 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 t+0 S4 A32])
        (reg:SI 84)) "../main.cpp":10:5 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "../main.cpp":11:5 -1
     (nil))
(insn 14 13 15 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -16 [0xfffffffffffffff0])) [1 b+0 S4 A64])
                    (reg:SI 85)))
            (clobber (reg:CC 17 flags))
        ]) "../main.cpp":11:5 -1
     (nil))
(insn 15 14 16 4 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 t+0 S4 A32])) "../main.cpp":12:5 -1
     (nil))
(insn 16 15 17 4 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (reg:SI 86)) "../main.cpp":12:5 -1
     (nil))
(insn 17 16 18 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../main.cpp":13:5 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 18 17 19 5 2 (nil) [1 uses])
(note 19 18 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 19 22 5 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "../main.cpp":8:11 -1
     (nil))
(insn 22 21 23 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 87)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 n+0 S4 A64]))) "../main.cpp":8:11 -1
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "../main.cpp":8:11 -1
     (nil)
 -> 20)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 28 6 (set (reg:SI 82 [ _8 ])
        (const_int 0 [0])) "../main.cpp":15:1 -1
     (nil))
(insn 28 25 32 6 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _8 ])) "../main.cpp":15:1 -1
     (nil))
(insn 32 28 33 6 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "../main.cpp":15:1 -1
     (nil))
(insn 33 32 0 6 (use (reg/i:SI 0 ax)) "../main.cpp":15:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

